{
"$schema": "https://json-schema.org/draft/2020-12/schema",
"$id": "molecules.schema.json",
"title": "Symbolic Molecule Schema",
"type": "object",
"additionalProperties": false,
"required": ["species_id", "name", "formula", "wavelength_um", "spectral_regions", "fingerprints", "rules"],
"properties": {
 "species_id": {
   "type": "string",
   "pattern": "^[A-Za-z0-9_\\-]+$",
   "description": "Unique ID used across SpectraMind (e.g., 'H2O', 'CH4')"
 },
 "name": { "type": "string", "minLength": 1 },
 "formula": { "type": "string", "minLength": 1 },
 "charge": { "type": "integer", "default": 0 },
 "is_radiatively_active": { "type": "boolean", "default": true },

 "wavelength_um": {
   "type": "object",
   "required": ["min", "max"],
   "additionalProperties": false,
   "properties": {
     "min": { "type": "number", "exclusiveMinimum": 0.0 },
     "max": { "type": "number", "exclusiveMinimum": 0.0 }
   },
   "description": "Global wavelength coverage for molecule config (μm)"
 },

 "default_binning": {
   "type": "object",
   "additionalProperties": false,
   "required": ["n_bins"],
   "properties": {
     "n_bins": { "type": "integer", "minimum": 1, "description": "Reference bin count (e.g., 283)" },
     "bin_map": {
       "type": "array",
       "items": { "type": "number", "exclusiveMinimum": 0.0 },
       "description": "Optional μm centers per bin; if omitted, loader will infer"
     }
   }
 },

 "spectral_regions": {
   "type": "array",
   "minItems": 1,
   "items": { "$ref": "region.schema.json" }
 },

 "fingerprints": {
   "type": "array",
   "minItems": 1,
   "items": { "$ref": "fingerprint.schema.json" }
 },

 "rules": {
   "type": "array",
   "minItems": 0,
   "items": { "$ref": "rule.schema.json" }
 },

 "metadata": {
   "type": "object",
   "additionalProperties": false,
   "properties": {
     "sources": {
       "type": "array",
       "items": { "type": "string" },
       "description": "Literature or database references (HITRAN/ExoMol/etc.)"
     },
     "notes": { "type": "string" },
     "version": { "type": "string", "pattern": "^[0-9]+\\.[0-9]+(\\.[0-9]+)?$" },
     "updated": { "type": "string", "format": "date" }
   }
 }
}
}
