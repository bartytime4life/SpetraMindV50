name: CI

on:
  push:
    branches: [ main, develop, dev, staging, release/* ]
    paths-ignore:
      - 'docs/'
      - '*.md'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/*.md'
  pull_request:
    branches: [ main, develop, dev, staging ]
  workflow_dispatch:
    inputs:
      auto_submit:
        description: "Force Kaggle auto-submit (overrides AUTO_SUBMIT var)"
        type: boolean
        required: false
        default: false

permissions:
  contents: read
  actions: read
  checks: write

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VER: "3.11"
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  POETRY_VIRTUALENVS_IN_PROJECT: "true"
  POETRY_NO_INTERACTION: "1"
  UV_SYSTEM_PYTHON: "1"
  # Kaggle creds provided via repo Secrets
  KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
  KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}
  # Optional Actions Variables (set under Settings → Variables → Actions)
  KAGGLE_COMPETITION: ${{ vars.KAGGLE_COMPETITION }}
  AUTO_SUBMIT: ${{ vars.AUTO_SUBMIT }}

jobs:
  build-test:
    name: Build • Lint • Test • Selftest • Pack
    runs-on: ubuntu-latest
    outputs:
      built_bundle: ${{ steps.bundle_out.outputs.has_bundle }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python ${{ env.PYTHON_VER }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VER }}
          cache: 'pip'
      - name: Display Python version
        run: python -V
      - name: Install OS dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y graphviz pandoc
      - name: Install Poetry and uv
        run: |
          pip install --upgrade pip wheel setuptools
          pip install --upgrade poetry uv
      - name: Cache Poetry virtualenv
        uses: actions/cache@v4
        with:
          path: |
            .venv
            ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock', 'pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-poetry-
      - name: Cache DVC data (optional)
        if: hashFiles('.dvc/config') != ''
        uses: actions/cache@v4
        with:
          path: .dvc/cache
          key: ${{ runner.os }}-dvc-${{ hashFiles('**/*.dvc', '.dvc/config') }}
          restore-keys: |
            ${{ runner.os }}-dvc-
      - name: Install Project Dependencies (Poetry or pip)
        run: |
          set -euxo pipefail
          if [ -f "pyproject.toml" ]; then
            poetry --version
            poetry install --no-interaction --no-ansi
            echo "source .venv/bin/activate" >> "$GITHUB_ENV"
          elif [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          else
            echo "No pyproject.toml or requirements.txt; installing core tooling only."
          fi
          pip install --upgrade ruff mypy pytest pytest-cov pip-audit bandit trufflehog kaggle
      - name: Configure Kaggle (optional)
        if: ${{ env.KAGGLE_USERNAME != '' && env.KAGGLE_KEY != '' }}
        run: |
          mkdir -p ~/.kaggle
          cat > ~/.kaggle/kaggle.json <<EOF
          { "username": "${KAGGLE_USERNAME}", "key": "${KAGGLE_KEY}" }
          EOF
          chmod 600 ~/.kaggle/kaggle.json
          kaggle --version || true
      - name: Pull DVC data (optional)
        if: hashFiles('.dvc/config') != ''
        run: |
          pip install --upgrade dvc
          dvc pull || echo "DVC pull skipped."
      - name: Lint (ruff)
        run: |
          ruff --version
          ruff check .
      - name: Type Check (mypy; run only if config present)
        if: hashFiles('mypy.ini') != '' || hashFiles('pyproject.toml') != ''
        run: |
          if [ -f "mypy.ini" ] || grep -q "\[tool.mypy\]" pyproject.toml 2>/dev/null; then
            mypy .
          else
            echo "mypy config not found; skipping."
          fi
      - name: Selftest (SpectraMind)
        run: |
          set -euxo pipefail
          mkdir -p logs reports dist
          if python - <<'PY'
import importlib, sys
try:
    importlib.import_module('spectramind')
    sys.exit(0)
except Exception:
    sys.exit(1)
PY
          then
            python -m spectramind --version || true
            python -m spectramind test --mode fast --md logs/selftest_report.md --json logs/selftest_report.json || true
          elif [ -f "selftest.py" ]; then
            python selftest.py --mode fast --md logs/selftest_report.md --json logs/selftest_report.json || python selftest.py || true
          else
            echo "No SpectraMind CLI or selftest.py found; continuing."
          fi
      - name: Unit Tests
        run: |
          mkdir -p reports
          pytest -q --maxfail=1 --disable-warnings --cov=src --cov-report=xml:reports/coverage.xml --junitxml=reports/junit.xml || pytest -q --maxfail=1 --disable-warnings || true
      - name: Build Diagnostics HTML and Bundle (best-effort)
        id: bundle_out
        run: |
          set -euxo pipefail
          mkdir -p dist
          has_bundle="0"
          if python - <<'PY'
import importlib, sys
try:
    importlib.import_module('spectramind')
    sys.exit(0)
except Exception:
    sys.exit(1)
PY
          then
            python -m spectramind diagnose dashboard --out dist/diagnostic_report_v1.html --open 0 || true
            python -m spectramind submit --bundle-out dist/submission.zip --include-html dist/diagnostic_report_v1.html && has_bundle="1" || true
          elif [ -f "cli_submit.py" ]; then
            python cli_submit.py --pack --out dist/submission.zip --html dist/diagnostic_report_v1.html && has_bundle="1" || true
          else
            echo "No submission CLI detected; skipping bundle."
          fi
          echo "has_bundle=${has_bundle}" >> "$GITHUB_OUTPUT"
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: spectramind-ci-${{ github.run_id }}
          path: |
            logs/**
            reports/**
            dist/**
            v50_debug_log.md
          if-no-files-found: warn
          retention-days: 7

  auto-submit:
    name: Kaggle Auto-Submit (conditional)
    needs: build-test
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/main' &&
      (env.AUTO_SUBMIT == '1' || inputs.auto_submit) &&
      needs.build-test.outputs.built_bundle == '1' &&
      env.KAGGLE_USERNAME != '' && env.KAGGLE_KEY != ''
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Prepare Python + Kaggle
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: pip install kaggle
      - name: Configure Kaggle credentials
        run: |
          mkdir -p ~/.kaggle
          cat > ~/.kaggle/kaggle.json <<EOF
          { "username": "${KAGGLE_USERNAME}", "key": "${KAGGLE_KEY}" }
          EOF
          chmod 600 ~/.kaggle/kaggle.json
          kaggle --version || true
      - name: Download CI artifacts
        uses: actions/download-artifact@v4
        with:
          name: spectramind-ci-${{ github.run_id }}
          path: ci_artifacts
      - name: Resolve competition name
        id: comp
        shell: bash
        run: |
          set -euo pipefail
          COMP="${KAGGLE_COMPETITION:-neurips-2025-ariel-data-challenge}"
          echo "competition=${COMP}" >> "$GITHUB_OUTPUT"
      - name: Submit to Kaggle
        env:
          COMPETITION: ${{ steps.comp.outputs.competition }}
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f "ci_artifacts/dist/submission.zip" ]; then
            echo "No submission.zip found in artifacts; aborting submit."
            exit 0
          fi
          SHORT_SHA="${GITHUB_SHA::7}"
          RUN_URL="https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          MSG="CI auto-submit ${SHORT_SHA} (${RUN_URL})"
          ls -l ci_artifacts/dist || true
          kaggle competitions submit -c "${COMPETITION}" -f "ci_artifacts/dist/submission.zip" -m "${MSG}" || true
      - name: Note
        run: echo "Auto-submit attempted (best-effort). Check Kaggle for status."
