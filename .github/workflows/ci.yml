name: ci

on:
push:
branches: [ main, master, develop, “release/” ]
pull_request:
branches: [ “” ]

permissions:
contents: read

concurrency:
group: ci-${{ github.workflow }}-${{ github.ref }}
cancel-in-progress: true

env:
PYTHONUTF8: “1”
PIP_DISABLE_PIP_VERSION_CHECK: “1”
PIP_NO_PYTHON_VERSION_WARNING: “1”
POETRY_VERSION: “1.8.3”

jobs:
setup:
name: Setup & Cache
runs-on: ubuntu-latest
outputs:
python-version: ${{ steps.meta.outputs.python-version }}
steps:
- name: Select Python
id: meta
run: echo “python-version=3.11” >> “$GITHUB_OUTPUT”

lint:
name: Lint (ruff)
runs-on: ubuntu-latest
needs: setup
steps:
- uses: actions/checkout@v4
with: { fetch-depth: 0 }

  - name: Setup Python ${{ needs.setup.outputs.python-version }}
    uses: actions/setup-python@v5
    with:
      python-version: ${{ needs.setup.outputs.python-version }}

  - name: Install Poetry ${{ env.POETRY_VERSION }}
    run: |
      python -m pip install -U pip
      python -m pip install "poetry==${POETRY_VERSION}"
      poetry --version
      poetry config virtualenvs.in-project true

  - name: Cache Poetry virtualenv
    id: cache-poetry
    uses: actions/cache@v4
    with:
      path: ./.venv
      key: venv-${{ runner.os }}-${{ needs.setup.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

  - name: Install deps (poetry)
    run: |
      poetry install --no-interaction --no-ansi
  - name: Ruff lint
    run: |
      ./.venv/bin/ruff --version
      ./.venv/bin/ruff . --output-format=github

test:
name: Unit Tests (pytest)
runs-on: ubuntu-latest
needs: [setup, lint]
steps:
- uses: actions/checkout@v4
with: { fetch-depth: 0 }

  - name: Setup Python ${{ needs.setup.outputs.python-version }}
    uses: actions/setup-python@v5
    with:
      python-version: ${{ needs.setup.outputs.python-version }}

  - name: Install Poetry ${{ env.POETRY_VERSION }}
    run: |
      python -m pip install -U pip
      python -m pip install "poetry==${POETRY_VERSION}"
      poetry config virtualenvs.in-project true

  - name: Cache Poetry virtualenv
    id: cache-poetry
    uses: actions/cache@v4
    with:
      path: ./.venv
      key: venv-${{ runner.os }}-${{ needs.setup.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

  - name: Install deps (poetry)
    run: |
      poetry install --no-interaction --no-ansi

  - name: Run pytest
    run: |
      ./.venv/bin/python -m pytest -q

smoke:
name: Smoke E2E (CLI)
runs-on: ubuntu-latest
needs: [setup, test]
steps:
- uses: actions/checkout@v4
with: { fetch-depth: 0 }

  - name: Setup Python ${{ needs.setup.outputs.python-version }}
    uses: actions/setup-python@v5
    with:
      python-version: ${{ needs.setup.outputs.python-version }}

  - name: Install Poetry ${{ env.POETRY_VERSION }}
    run: |
      python -m pip install -U pip
      python -m pip install "poetry==${POETRY_VERSION}"
      poetry config virtualenvs.in-project true

  - name: Cache Poetry virtualenv
    id: cache-poetry
    uses: actions/cache@v4
    with:
      path: ./.venv
      key: venv-${{ runner.os }}-${{ needs.setup.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

  - name: Install deps (poetry)
    run: |
      poetry install --no-interaction --no-ansi

  - name: CLI — version & selftest
    run: |
      ./.venv/bin/python -m spectramind --version
      ./.venv/bin/python -m spectramind selftest

  - name: CLI — dry diagnostics
    continue-on-error: true
    run: |
      ./.venv/bin/python -m spectramind diagnose

  - name: CLI — predict stub & package
    run: |
      ./.venv/bin/python -m spectramind predict --out-csv outputs/submission.csv
      ./.venv/bin/python -m spectramind submit bundle

  - name: Upload submission & logs
    uses: actions/upload-artifact@v4
    with:
      name: spectramind-outputs
      path: |
        outputs/submission.csv
        outputs/submission_bundle.zip
        v50_debug_log.md
        events.jsonl
      if-no-files-found: warn

summary:
name: CI Summary
runs-on: ubuntu-latest
needs: [lint, test, smoke]
if: always()
steps:
- name: Build result
run: |
echo “Lint:  ${{ needs.lint.result }}”  >> $GITHUB_STEP_SUMMARY
echo “Tests: ${{ needs.test.result }}”  >> $GITHUB_STEP_SUMMARY
echo “Smoke: ${{ needs.smoke.result }}” >> $GITHUB_STEP_SUMMARY